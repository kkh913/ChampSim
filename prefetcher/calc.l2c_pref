#include "cache.h"
#include <list>

#define TAGSIZE 12
#define TRUNCATE(x, nbits) (((x) & ((1 << (nbits)) - 1)))
#define SAMEPAGE(lineaddr1, lineaddr2) ((((lineaddr1) ^ (lineaddr2)) >> LOG2_BLOCK_SIZE) == 0)

#define DEGREE 16

// For Page Access History Table
#define PRINT_INTERVAL 255
#define NPAHTES 256
#define SHIFTSIZE 6
#define IDSIZE 12

// For Sandbox
#define NSBES 64

// For Prefetch Offset Candidate
#define NPOCS DEGREE

// For Best Offset List
#define NBOLES 64

// For Prefetch Filter
#define NPFES 256
#define PF_INDEX_SIZE 8

// #define TEST
// #define MATPLOT
// #define BOLTEST

#ifdef MATPLOT
#define MIN_CYCLE 0
#endif

#ifdef BOLTEST
#define MIN_CYCLE 0
#endif

struct pahte {
  uint16_t tag; // 12 bits
  uint8_t init; // 6 bits
  uint8_t next; // 6 bits
  bool valid;   // 1 bit
  uint8_t lru;  // 8 bits (for 256 entries)

  pahte() : tag(0), init(0), next(0), valid(false), lru(0) {}
};

pahte paht[NUM_CPUS][NPAHTES];

struct sbe {
  uint16_t id;     // 12 bits
  uint16_t tag;    // 12 bits
  uint16_t offset; // 6 bits

  sbe() : id(0), tag(0), offset(0) {}
};

typedef std::list<sbe> sandbox_list;
typedef sandbox_list::reverse_iterator sandbox_iter;

sandbox_list sandbox[NUM_CPUS];

typedef std::list<uint8_t> offset_list;
typedef offset_list::reverse_iterator offset_iter;

struct poce {
  uint8_t po;       // 6 bits
  uint8_t positive; // 6 bits
  uint8_t negative; // 6 bits

  poce() : po(0), positive(0), negative(0) {}
};

typedef std::list<poce> poc_list;
typedef poc_list::reverse_iterator poc_iter;

struct bo {
  uint16_t id;
  uint8_t po;
  uint8_t score;

  bo() : id(0), po(0), score(0) {}
};

typedef std::list<bo> bo_list;
typedef bo_list::iterator bo_iter;
typedef bo_list::reverse_iterator bo_riter;

bo_list bol[NUM_CPUS];

uint16_t PF[NUM_CPUS][NPFES];

uint8_t offset_search_count[NUM_CPUS];
bool is_hit_on_page_access_history_table[NUM_CPUS];
uint8_t page_access_history_table_entry[NUM_CPUS];
uint8_t prefetch_offset_list[NUM_CPUS][DEGREE];
uint8_t current_degree[NUM_CPUS];

uint16_t pf_tag(uint64_t cl_address) { return TRUNCATE(cl_address >> PF_INDEX_SIZE, TAGSIZE); }

uint8_t pf_index(uint64_t cl_address) {
  return TRUNCATE(cl_address ^ (cl_address >> PF_INDEX_SIZE), PF_INDEX_SIZE);
}

void pf_insert(uint8_t cpu, uint64_t cl_address) {
  uint8_t index = pf_index(cl_address);
  PF[cpu][index] = pf_tag(cl_address);
}

bool pf_hit(uint8_t cpu, uint64_t cl_address) {
  uint8_t index = pf_index(cl_address);
  return PF[cpu][index] == pf_tag(cl_address);
}

void test_sandbox(uint8_t cpu) {
  int i = 0;
  for (sandbox_iter riter = sandbox[cpu].rbegin(); riter != sandbox[cpu].rend(); ++riter) {
    sbe sandbox_entry = *riter;
    printf("SB:%03d ID: %03x, TAG: %03x, OFFSET: %d\n", i++, sandbox_entry.id, sandbox_entry.tag,
           sandbox_entry.offset);
  }
  printf("\n");
}

void test_best_offset_list(uint8_t cpu) {
  for (bo_riter riter = bol[cpu].rbegin(); riter != bol[cpu].rend(); ++riter) {
    bo bo_entry = *riter;
    printf("BOL ID: %03x, PO: %d, SCORE: %d\n", bo_entry.id, bo_entry.po, bo_entry.score);
  }
  printf("\n");
}

void increase_lru_of_page_access_history_table(uint8_t cpu, uint8_t repl_entry) {
  if (paht[cpu][repl_entry].lru == NPAHTES - 1) {
    return;
  }

  uint8_t lru = paht[cpu][repl_entry].lru;

  for (int entry = 0; entry < NPAHTES; ++entry) {
    if (entry == repl_entry) {
      paht[cpu][entry].lru = NPAHTES - 1;
    } else if (paht[cpu][entry].lru > lru) {
      --paht[cpu][entry].lru;
    }
  }
}

uint16_t get_id(uint8_t init, uint8_t next) { return TRUNCATE((init << SHIFTSIZE) ^ next, IDSIZE); }

void push_entry_into_sandbox(uint8_t cpu, sbe &sandbox_entry) {
  sandbox[cpu].push_back(sandbox_entry);
  if (sandbox[cpu].size() > NSBES) {
    sandbox[cpu].pop_front();
  }
}

void push_entry_into_bo_list(uint8_t cpu, bo &bo_entry) {
  bol[cpu].push_back(bo_entry);
  if (bol[cpu].size() > NBOLES) {
    bol[cpu].pop_front();
  }
}

void update_best_offset_list(uint8_t cpu, uint16_t id, uint8_t po, uint8_t score) {
  bool exist = false;

  // 같은 id, po가 발견되면 스코어 업데이트 후 엔트리를 상위로 이동시켜야 한다.
  // 엔트리 복사 -> 삭제 -> push_back 하여 상위 이동
  // 없으면 바로 push_back

  for (bo_iter iter = bol[cpu].begin(); iter != bol[cpu].end(); ++iter) {
    bo bo_entry = *iter;
    if (bo_entry.id == id && bo_entry.po == po) {

      bo recent_entry;
      recent_entry.id = id;
      recent_entry.po = po;
      recent_entry.score = score;

      // 엔트리 삭제
      bol[cpu].erase(iter);

      // 엔트리 최상위에 추가
      push_entry_into_bo_list(cpu, recent_entry);

      exist = true;
      break;
    }
  }

  if (!exist) {
    bo bo_entry;
    bo_entry.id = id;
    bo_entry.po = po;
    bo_entry.score = score;
    push_entry_into_bo_list(cpu, bo_entry);
  }
}

void update_prefetch_offset_candidate_table(uint8_t cpu, poc_list &list, uint8_t po) {
  bool exist = false;

  for (poc_iter riter = list.rbegin(); riter != list.rend(); ++riter) {
    poce prefetch_offset_candidate_entry = *riter;
    if (prefetch_offset_candidate_entry.po == po) {
      exist = true;
      break;
    }
  }

  if (!exist && list.size() < NPOCS) {
    poce prefetch_offset_candidate_entry;
    prefetch_offset_candidate_entry.po = po;
    prefetch_offset_candidate_entry.positive = 0;
    prefetch_offset_candidate_entry.negative = 0;
    list.push_back(prefetch_offset_candidate_entry);
  }
}

void insert_sandbox_entry(uint8_t cpu, uint8_t paht_entry, uint8_t offset) {
  uint16_t tag = paht[cpu][paht_entry].tag;
  uint8_t init = paht[cpu][paht_entry].init;
  uint8_t next = paht[cpu][paht_entry].next;
  uint16_t id = get_id(init, next);
  sbe sandbox_entry;
  offset_list offsets; //  점수 계산 오프셋 만을 대상으로 하는 임시 저장소
  poc_list pocs;       // 프리페치 오프셋의 점수가 계산되는 임시 저장소

  // next와 offset이 같다는 것은 2번째 진입이라는 의미이다.
  // 따라서 1번째 진입 오프셋과 같이 샌드박스에 추가한다.
  if (next == offset) {
    sandbox_entry.id = id;
    sandbox_entry.tag = tag;
    sandbox_entry.offset = init;
    // printf("%d\n", init);
    push_entry_into_sandbox(cpu, sandbox_entry);
  }

  sandbox_entry.id = id;
  sandbox_entry.tag = tag;
  sandbox_entry.offset = offset;
  // printf("%d\n", offset);
  push_entry_into_sandbox(cpu, sandbox_entry);

  // test_sandbox(cpu);

  for (sandbox_iter riter = sandbox[cpu].rbegin(); riter != sandbox[cpu].rend(); ++riter) {
    sbe sandbox_first_entry = *riter;
    // 현재 접근 주소와 id, tag가 같은 것들을 찾아야 한다.
    if (sandbox_first_entry.id == id && sandbox_first_entry.tag == tag) {
      // 발견된 기록 이전의 것들을 검색하기 위한 루프
      for (sandbox_iter second_riter = riter; second_riter != sandbox[cpu].rend(); ++second_riter) {
        sbe sandbox_second_entry = *second_riter;
        // 양의 값으로 차이가 나는 놈들만 선택하여 PO를 계산한다. 계산된 PO는 POCT에 바로 전송한다.
        if (sandbox_second_entry.id == id && sandbox_second_entry.tag == tag &&
            sandbox_first_entry.offset > sandbox_second_entry.offset) {
          update_prefetch_offset_candidate_table(
              cpu, pocs, sandbox_first_entry.offset - sandbox_second_entry.offset);
        }
      }
      offsets.push_back(sandbox_first_entry.offset);
      if (offsets.size() == NPOCS) {
        break;
      }
    }
  }
#ifdef BOLTEST
  uint64_t cycle = current_core_cycle[cpu];
  if (cycle > MIN_CYCLE) {
    printf("Offset List - cycle %lld tag %03x id %03x\n", cycle, tag, id);
    for (offset_iter riter = offsets.rbegin(); riter != offsets.rend(); ++riter) {
      printf("OFFSET: %d\n", *riter);
    }
    printf("\n");
  }
#endif
  //
  // printf("before calculation\n");
  // for (poc_iter riter = pocs.rbegin(); riter != pocs.rend(); ++riter) {
  //   poce prefetch_offset_candidate_entry = *riter;
  //   printf("PO: %d, P: %d, N: %d\n", prefetch_offset_candidate_entry.po,
  //          prefetch_offset_candidate_entry.positive, prefetch_offset_candidate_entry.negative);
  // }
  // printf("\n");

  // offsets에 있는 오프셋과 POCT에 업데이트된 오프셋들을 이용하여 점수를 계산한다.
  // offsets 상단부터 순서대로 기준을 잡고 거기에서 +PO한 것이 offsets 내에 존재하면 해당 PO의
  // positive를 증가시킨다. 반대로 존재하지 않으면 negative를 증가시킨다.

  for (offset_iter riter = offsets.rbegin(); riter != offsets.rend(); ++riter) {
    uint8_t first_offset = *riter;
    for (poc_iter poc_riter = pocs.rbegin(); poc_riter != pocs.rend(); ++poc_riter) {
      poce *prefetch_offset_candidate_entry = &(*poc_riter);

      bool exist = false;
      uint8_t second_offset = first_offset + prefetch_offset_candidate_entry->po;
      if (second_offset < BLOCK_SIZE) {
        for (offset_iter second_riter = riter; second_riter != offsets.rend(); ++second_riter) {
          if (*second_riter == second_offset) {
            exist = true;
            break;
          }
        }
        if (exist) {
          ++prefetch_offset_candidate_entry->positive;
        } else {
          ++prefetch_offset_candidate_entry->negative;
        }
      }
    }
  }

  // printf("after calculation\n");
  // for (poc_iter riter = pocs.rbegin(); riter != pocs.rend(); ++riter) {
  //   poce prefetch_offset_candidate_entry = *riter;
  //   printf("PO: %d, P: %d, N: %d\n", prefetch_offset_candidate_entry.po,
  //          prefetch_offset_candidate_entry.positive, prefetch_offset_candidate_entry.negative);
  // }
  // printf("\n");

  // bool positive = false;
  // for (poc_iter riter = pocs.rbegin(); riter != pocs.rend(); ++riter) {
  //   poce prefetch_offset_candidate_entry = *riter;
  //   if (prefetch_offset_candidate_entry.positive > prefetch_offset_candidate_entry.negative) {
  //     positive = true;
  //     break;
  //   }
  // }
  //
  // if (positive) {
  //   clear_best_offset_list(cpu, id);
  // }

  for (poc_iter riter = pocs.rbegin(); riter != pocs.rend(); ++riter) {
    poce prefetch_offset_candidate_entry = *riter;
    if (prefetch_offset_candidate_entry.positive > prefetch_offset_candidate_entry.negative) {

      // if (id == 0x083 && prefetch_offset_candidate_entry.po == 3) {
      //   test_sandbox(cpu);
      //   for (offset_iter riter = offsets.rbegin(); riter != offsets.rend(); ++riter) {
      //     printf("OFFSET: %d\n", *riter);
      //   }
      //   printf("\n");
      //   exit(0);
      // }

      update_best_offset_list(cpu, id, prefetch_offset_candidate_entry.po,
                              prefetch_offset_candidate_entry.positive -
                                  prefetch_offset_candidate_entry.negative);
    }
  }
#ifdef BOLTEST
  if (cycle > MIN_CYCLE) {
    test_best_offset_list(cpu);
  }
  // exit(0);
#endif
}

void train_access_pattern(uint8_t cpu, uint64_t cl_address) {
  uint8_t offset = TRUNCATE(cl_address, LOG2_BLOCK_SIZE);
  uint64_t page = cl_address >> LOG2_BLOCK_SIZE;
  uint16_t tag = TRUNCATE(page, TAGSIZE);
  uint8_t repl_entry = 0;
  bool exist = false;

  // printf("train tag %03x offset %d\n", tag, offset);

  ++offset_search_count[cpu];

  for (int entry = 0; entry < NPAHTES; ++entry) {
    if (paht[cpu][entry].tag == tag) {
      // 이건 일반적인 상황
      // 새로운 태그라면 문제없이 동작 가능.
      if (!paht[cpu][entry].valid) {
        paht[cpu][entry].next = offset;
        paht[cpu][entry].valid = true;
      } else {
        // 만약 같은 태그로 init 또는 init보다 작은 offset이 들어오면? (valid 상태)
        if (paht[cpu][entry].init >= offset) {
          paht[cpu][entry].init = offset;
          paht[cpu][entry].next = 0;
          paht[cpu][entry].valid = false;
        }
      }

      if (paht[cpu][entry].valid) {
        insert_sandbox_entry(cpu, entry, offset);

        // test_sandbox(cpu);
        // exit(0);

        increase_lru_of_page_access_history_table(cpu, entry);
        is_hit_on_page_access_history_table[cpu] = true;
        page_access_history_table_entry[cpu] = entry;
      }

      exist = true;
      break;
    }
    if (paht[cpu][entry].lru == 0) {
      repl_entry = entry;
    }
  }

  if (!exist) {
    paht[cpu][repl_entry].tag = tag;
    paht[cpu][repl_entry].init = offset;
    paht[cpu][repl_entry].next = 0;
    paht[cpu][repl_entry].valid = false;
    increase_lru_of_page_access_history_table(cpu, repl_entry);

#ifdef MATPLOT
    // uint64_t cycle = current_core_cycle[cpu];
    // if (cycle > MIN_CYCLE) {
    //   cout << cycle << ",0,0,0,0," << cl_address << endl;
    // }
#endif
  }

  if (offset_search_count[cpu] == PRINT_INTERVAL) {
    offset_search_count[cpu] = 0;

#ifdef TEST
    // test_best_offset_list(cpu);
    exit(0);
#endif
  }
}

void search_prefetch_candidates(uint8_t cpu, uint64_t cl_address) {
  uint8_t offset = TRUNCATE(cl_address, LOG2_BLOCK_SIZE);
  uint8_t init = paht[cpu][page_access_history_table_entry[cpu]].init;
  uint8_t next = paht[cpu][page_access_history_table_entry[cpu]].next;
  uint8_t degree = 0;
  uint16_t id = get_id(init, next);
  bool exist = false;
  uint8_t po = 0;
  uint8_t max = 0;

  //  루프를 돌면서 최대 스코어를 확인
  for (bo_riter riter = bol[cpu].rbegin(); riter != bol[cpu].rend(); ++riter) {
    bo bo_entry = *riter;
    while (bo_entry.id == id) {
      exist = true;

      if (max < bo_entry.score) {
        max = bo_entry.score;
        po = bo_entry.po;
      }

      prefetch_offset_list[cpu][degree] = bo_entry.po;
      ++degree;

      // while에 빠졌으니 riter를 증가시켜야 함.
      ++riter;
      bo_entry = *riter;
    }
    if (exist) {
      break;
    }
  }

  // init에 대한 프리페치를 수행
  // 앞에서 가장 점수가 높은 PO를 찾았었다.
  if (offset == next) {
    if (init + po > next) {
      prefetch_offset_list[cpu][degree] = po - next + init;
      ++degree;
    }
  }

  current_degree[cpu] = degree;
}

bool issue_prefetch(uint8_t cpu, uint64_t lineaddr, uint8_t degree) {
  if (prefetch_offset_list[cpu][degree] == 0) {
    return false;
  }

  if (!SAMEPAGE(lineaddr, lineaddr + prefetch_offset_list[cpu][degree])) {
    return false;
  }

  if (pf_hit(cpu, lineaddr + prefetch_offset_list[cpu][degree])) {
    return false;
  }

  // if (prefetch_offset_list[cpu][degree] > 16) {
  //   return false;
  // }

  return true;
}

void CACHE::l2c_prefetcher_initialize() {
  //  LRU 초기화
  for (int entry = 0; entry < NPAHTES; ++entry) {
    paht[cpu][entry].lru = entry;
  }
}

void CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type) {
  is_hit_on_page_access_history_table[cpu] = false;
  current_degree[cpu] = 0;
  uint64_t cl_address = addr >> LOG2_BLOCK_SIZE;

#ifdef MATPLOT
  uint64_t cycle = current_core_cycle[cpu];
  if (cycle > MIN_CYCLE) {
    if (!cache_hit) {
      cout << cycle << ",0," << cl_address << ",0,0,0" << endl;
    } else {
      if (type == 1) {
        cout << cycle << ",0,0," << cl_address << ",0,0" << endl;
      } else {
        cout << cycle << "," << cl_address << ",0,0,0,0" << endl;
      }
    }
  }
#endif

  if (cache_hit == 0 ||                // cache miss
      (cache_hit == 1 && type == 1)) { //  prefetched hit

    train_access_pattern(cpu, cl_address);
    if (is_hit_on_page_access_history_table[cpu]) {
      search_prefetch_candidates(cpu, cl_address);

      for (int degree = 0; degree < current_degree[cpu]; ++degree) {
        if (issue_prefetch(cpu, cl_address, degree)) {
          uint64_t pf_addr = (cl_address + prefetch_offset_list[cpu][degree]) << LOG2_BLOCK_SIZE;

          if (MSHR.occupancy < 16) {
            if (prefetch_line(ip, addr, pf_addr, FILL_L2)) {
              pf_insert(cpu, cl_address + prefetch_offset_list[cpu][degree]);
            }
          } else {
            if (prefetch_line(ip, addr, pf_addr, FILL_LLC)) {
              pf_insert(cpu, cl_address + prefetch_offset_list[cpu][degree]);
            }
          }
        }
      }
    }
  }
}

void CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch,
                                      uint64_t evicted_addr) {
#ifdef MATPLOT
  if (prefetch) {

    uint64_t cl_address = addr >> LOG2_BLOCK_SIZE;
    uint64_t cycle = current_core_cycle[cpu];
    if (cycle > MIN_CYCLE) {
      cout << cycle << ",0,0,0," << cl_address << ",0" << endl;
    }
  }

  if (set == 1 && way == 0) { // useless
    uint64_t cl_address = evicted_addr >> LOG2_BLOCK_SIZE;
    uint64_t cycle = current_core_cycle[cpu];
    if (cycle > MIN_CYCLE) {
      cout << cycle << ",0,0,0,0," << cl_address << endl;
    }
  }
#endif
}

void CACHE::l2c_prefetcher_final_stats() {}
