#include "cache.h"

#define NOFFSETS 26
#define DEFAULT_OFFSET 1
#define SCORE_MAX 31
#define ROUND_MAX 127

#define NLAYERS 4
#define NENTRIES 64
#define INDEXSIZE 6

#define RRTAG 12
#define BAD_SCORE 1

#define LOGLINE 6

#define SAMEPAGE(lineaddr1, lineaddr2) ((((lineaddr1) ^ (lineaddr2)) >> 6) == 0)

#define INCREMENT(x, n)                                                        \
  {                                                                            \
    x++;                                                                       \
    if (x == (n))                                                              \
      x = 0;                                                                   \
  }

#define TRUNCATE(x, nbits) (((x) & ((1 << (nbits)) - 1)))

struct offsets_scores {
  int score[NOFFSETS]; // log2 SCORE_MAX = 5 bits per entry
  int max_score;       // log2 SCORE_MAX = 5 bits
  int best_offset;     // 7 bits (6-bit value + 1 sign bit)
  int round;           // log2 ROUND_MAX = 7 bits
  int p;               // log2 NOFFSETS = 6 bits
};

// There are more offsets defined in this paper. But they are too big to cross
// page boundaries.
const int OFFSET[NOFFSETS] = {1,  2,  3,  4,  5,  6,  8,  9,  10,
                              12, 15, 16, 18, 20, 24, 25, 27, 30,
                              32, 36, 40, 45, 48, 50, 54, 60};

int prefetch_offset[NUM_CPUS];

int recent_request[NUM_CPUS][NLAYERS][NENTRIES];

uint64_t tag_life[NUM_CPUS][NLAYERS][NENTRIES];

uint64_t real_addr[NUM_CPUS][NLAYERS][NENTRIES];

struct offsets_scores os[NUM_CPUS];

uint64_t totalUsedOffset[NUM_CPUS][NOFFSETS];
uint64_t totalLifeTime[NUM_CPUS];
uint64_t sampledTags[NUM_CPUS];
uint64_t totalRRHits[NUM_CPUS];
uint64_t totalRRMisses[NUM_CPUS];
uint64_t totalFalsePositive[NUM_CPUS];

int rr_tag(uint64_t lineaddr);
int rr_index(uint64_t lineaddr);
void rr_insert(uint8_t cpu, uint64_t lineaddr);
bool rr_hit(uint8_t cpu, uint64_t lineaddr);
void os_reset(uint8_t cpu);
void os_learn_best_offset(uint8_t cpu, uint64_t lineaddr);
bool issue_prefetch(uint8_t cpu, uint64_t lineaddr);
void recordOffsetStats(uint8_t cpu);

void CACHE::l2c_prefetcher_initialize() {
  prefetch_offset[cpu] = DEFAULT_OFFSET;
  os_reset(cpu);
}

void CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip,
                                   uint8_t cache_hit, uint8_t type) {
  uint64_t cl_address = addr >> LOGLINE;

  if (cache_hit == 0 ||                // cache miss
      (cache_hit == 1 && type == 1)) { //  prefetched hit

    os_learn_best_offset(cpu, cl_address);
    if (issue_prefetch(cpu, cl_address)) {
      uint64_t pf_addr = (cl_address + prefetch_offset[cpu]) << LOGLINE;
      if (MSHR.occupancy < 8) {
        prefetch_line(ip, addr, pf_addr, FILL_L2);
      } else {
        prefetch_line(ip, addr, pf_addr, FILL_LLC);
      }
      recordOffsetStats(cpu);
    }
  }
}

void CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way,
                                      uint8_t prefetch, uint64_t evicted_addr) {
  if (prefetch == 0)
    return;

  uint64_t cl_address = addr >> LOGLINE;
  uint64_t baselineaddr = cl_address - prefetch_offset[cpu];

  if (SAMEPAGE(baselineaddr, cl_address)) {
    // block address inserted.
    rr_insert(cpu, baselineaddr);
  }
}

void CACHE::l2c_prefetcher_final_stats() {
  uint64_t cycle = current_core_cycle[cpu];

  for (int layer = 0; layer < NLAYERS; ++layer) {
    for (int index = 0; index < NENTRIES; ++index) {
      if (tag_life[cpu][layer][index]) {
        assert(cycle - tag_life[cpu][layer][index] > 0);
        totalLifeTime[cpu] += (cycle - tag_life[cpu][layer][index]);
        ++sampledTags[cpu];
      }
    }
  }

  cout << endl << "L2C BO Prefetcher final stats" << endl;

  for (int i = 0; i < NOFFSETS; ++i) {
    cout << "CPU" << cpu << " Number of used offset " << OFFSET[i] << " : "
         << totalUsedOffset[cpu][i] << endl;
  }

  cout << "CPU" << cpu << " Total of tag life : " << totalLifeTime[cpu] << endl;
  cout << "CPU" << cpu << " Number of sampled tags : " << sampledTags[cpu]
       << endl;
  cout << "CPU" << cpu << " Average of tag life : "
       << (double)totalLifeTime[cpu] / sampledTags[cpu] << endl;

  cout << "CPU" << cpu
       << " Total number of rr table hits : " << totalRRHits[cpu] << endl;
  cout << "CPU" << cpu
       << " Total number of rr table misses : " << totalRRMisses[cpu] << endl;
  cout << "CPU" << cpu
       << " Total number of false positive : " << totalFalsePositive[cpu]
       << endl;
}

int rr_tag(uint64_t lineaddr) { return TRUNCATE(lineaddr >> INDEXSIZE, RRTAG); }

int rr_index(uint64_t lineaddr) {
  return TRUNCATE(lineaddr ^ (lineaddr >> INDEXSIZE), INDEXSIZE);
}

void rr_insert(uint8_t cpu, uint64_t lineaddr) {
  int i = rr_index(lineaddr);
  int tag = rr_tag(lineaddr);
  uint64_t cycle = current_core_cycle[cpu];
  int layer = rand() % NLAYERS;

  if (recent_request[cpu][layer][i] != tag) {
    // replacement event...
    if (tag_life[cpu][layer][i]) {
      assert(cycle - tag_life[cpu][layer][i] > 0);
      totalLifeTime[cpu] += (cycle - tag_life[cpu][layer][i]);
      ++sampledTags[cpu];
    }

    recent_request[cpu][layer][i] = tag;
    tag_life[cpu][layer][i] = cycle;
  }

  real_addr[cpu][layer][i] = lineaddr; //  for statistics...
}

bool rr_hit(uint8_t cpu, uint64_t lineaddr) {
  int i = rr_index(lineaddr);
  int tag = rr_tag(lineaddr);
  bool ret = false;

  for (int layer = 0; layer < NLAYERS; ++layer){
    if (recent_request[cpu][layer][i] == tag) {
      ret = true;
      if (real_addr[cpu][layer][i] != lineaddr) {
        ++totalFalsePositive[cpu];
      }
      break;
    }
  }

  return ret;
}

void os_reset(uint8_t cpu) {
  for (int i = 0; i < NOFFSETS; i++) {
    os[cpu].score[i] = 0;
  }
  os[cpu].max_score = 0;
  os[cpu].best_offset = 0;
  os[cpu].round = 0;
  os[cpu].p = 0;
}

void os_learn_best_offset(uint8_t cpu, uint64_t lineaddr) {
  int testoffset = OFFSET[os[cpu].p];
  uint64_t testlineaddr = lineaddr - testoffset;

  if (SAMEPAGE(lineaddr, testlineaddr) && rr_hit(cpu, testlineaddr)) {
    ++totalRRHits[cpu];

    os[cpu].score[os[cpu].p]++;
    if (os[cpu].score[os[cpu].p] >= os[cpu].max_score) {
      os[cpu].max_score = os[cpu].score[os[cpu].p];
      os[cpu].best_offset = testoffset;
    }
  } else {
    ++totalRRMisses[cpu];
  }

  if (os[cpu].p == (NOFFSETS - 1)) {
    os[cpu].round++;

    if ((os[cpu].max_score == SCORE_MAX) || (os[cpu].round == ROUND_MAX)) {
      prefetch_offset[cpu] =
          (os[cpu].best_offset != 0) ? os[cpu].best_offset : DEFAULT_OFFSET;
      if (os[cpu].max_score <= BAD_SCORE) {
        prefetch_offset[cpu] = 0;
      }
      os_reset(cpu);
    }
  }
  INCREMENT(os[cpu].p, NOFFSETS); // prepare to test the next offset
}

bool issue_prefetch(uint8_t cpu, uint64_t lineaddr) {
  if (prefetch_offset[cpu] == 0) {
    return false;
  }

  if (!SAMEPAGE(lineaddr, lineaddr + prefetch_offset[cpu])) {
    return false;
  }
  return true;
}

void recordOffsetStats(uint8_t cpu) {
  for (int i = 0; i < NOFFSETS; ++i) {
    if (OFFSET[i] == prefetch_offset[cpu]) {
      ++totalUsedOffset[cpu][i];
      break;
    }
  }
}
