// Per-page Most Offset Prefetcher (PMOP); page-ID 1 offset
#include "bloom.h"
#include "cache.h"

// Macros
#define SAMEPAGE(lineaddr1, lineaddr2) ((((lineaddr1) ^ (lineaddr2)) >> 6) == 0)
#define INCREMENT(x, n)  \
  {                      \
    x++;                 \
    if (x == (n)) x = 0; \
  }
#define TRUNCATE(x, nbits) (((x) & ((1 << (nbits)) - 1)))

// Global parameters
#define DEGREE 8
#define NUMHASH 7
#define ADDR_SIZE 3
#define ID_PAIR_SIZE 2
#define NOFFSETS 26
#define DEFAULT_OFFSET 1
#define SCORE_MAX 31
#define ROUND_MAX 127
#define BAD_SCORE 1
// There are more offsets defined in BOP. But they are too many to cross page boundaries. Thus, we truncated the offset list to fit on a 64 KB page.
const int OFFSET[NOFFSETS] = {1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36, 40, 45, 48, 50, 54, 60};

// Page access history table parameters
#define NPAHTES 64
#define TAGSIZE (8 * ADDR_SIZE) - LOG2_BLOCK_SIZE
struct pahte {     // Page access history table entries
  uint32_t tag;    // 18 bits
  int      id;     // 3 bits
  int      init;   // 6 bits
  bool     valid;  // 1 bit
  uint8_t  lru;    // 6 bits

  pahte() : tag(0), id(-1), init(0), valid(false), lru(0) {}
};
pahte PAHT[NUM_CPUS][NPAHTES];

// Page ID table parameters
#define NIDTES 8
struct idte {     // Page ID table entries
  int     id;     // 7 bits
  bool    valid;  // 1 bit
  uint8_t lru;    // 3 bits

  idte() : id(0), valid(false), lru(0) {}
};
idte IDT[NUM_CPUS][NIDTES];

// Address bloom filter
#define ADDR_BFSIZE 256
#define ADDR_BF_REFRESH 214
BLOOM    addr_bf[NUM_CPUS];
uint16_t addr_insert_count[NUM_CPUS];  // 8 bits counter

// Offset bloom filter parameters
#define OFFSET_BFSIZE 128
BLOOM offset_bf[NUM_CPUS][NIDTES];
struct offset_info {  // filter data
  uint8_t pos;
  int8_t  offset;
};

// Most offset prefetcher parameters
struct offsets_scores {
  int  score[NOFFSETS];            // log2 SCORE_MAX = 5 bits per entry
  int  candidate_offsets[DEGREE];  // 6 bits * DEGREE = 48 bits
  bool exist[NOFFSETS];            // 26 bits. flag bits whether most offset exists in candidate_offsets[i].

  int max_score;       // log2 SCORE_MAX = 5 bits
  int current_degree;  // number of offsets in candidate_offsets[DEGREE]
  int round;           // log2 ROUND_MAX = 7 bits
  int p;               // log2 NOFFSETS = 5 bits
};
int most_offsets[NUM_CPUS][DEGREE];  // offset 6 bits * 8 degrees = 48 bits

struct offsets_scores os[NUM_CPUS];

void increase_lru_of_page_access_history_table(uint8_t cpu, uint8_t repl_entry) {
  if (PAHT[cpu][repl_entry].lru == 0) {
    return;
  }

  uint8_t lru = PAHT[cpu][repl_entry].lru;

  for (int entry = 0; entry < NPAHTES; ++entry) {
    if (entry == repl_entry) {
      PAHT[cpu][entry].lru = 0;
    } else if (PAHT[cpu][entry].lru < lru) {
      ++PAHT[cpu][entry].lru;
    }
  }
}

void increase_lru_of_id_table(uint8_t cpu, uint8_t repl_entry) {
  if (IDT[cpu][repl_entry].lru == 0) {
    return;
  }

  uint8_t lru = IDT[cpu][repl_entry].lru;

  for (int entry = 0; entry < NIDTES; ++entry) {
    if (entry == repl_entry) {
      IDT[cpu][entry].lru = 0;
    } else if (IDT[cpu][entry].lru < lru) {
      ++IDT[cpu][entry].lru;
    }
  }
}

void os_reset(uint8_t cpu) {
  for (int i = 0; i < NOFFSETS; i++) {
    os[cpu].score[i] = 0;
    os[cpu].exist[i] = false;
  }

  for (int i = 0; i < DEGREE; ++i) {
    os[cpu].candidate_offsets[i] = 0;
  }

  os[cpu].max_score      = 0;
  os[cpu].current_degree = 0;
  os[cpu].round          = 0;
  os[cpu].p              = 0;
}

void addr_bf_insert(uint8_t cpu, uint64_t cl_address) {
  if (addr_insert_count[cpu] == ADDR_BF_REFRESH) {  // overflow
    bloom_free(&addr_bf[cpu]);                      // empty ABF
    addr_insert_count[cpu] = 0;
  }

  uint8_t buffer[ADDR_SIZE];
  for (int size = 0; size < ADDR_SIZE; ++size) {
    buffer[size] = TRUNCATE(cl_address >> (8 * size), 8);
  }

  if (!bloom_check(&addr_bf[cpu], buffer, ADDR_SIZE)) {  // check dup
    bloom_add(&addr_bf[cpu], buffer, ADDR_SIZE);         // insert address into ABF
    ++addr_insert_count[cpu];
  }
}

bool addr_bf_hit(uint8_t cpu, uint64_t cl_address) {
  uint8_t buffer[ADDR_SIZE];
  for (int size = 0; size < ADDR_SIZE; ++size) {
    buffer[size] = TRUNCATE(cl_address >> (8 * size), 8);
  }

  return bloom_check(&addr_bf[cpu], buffer, ADDR_SIZE);
}

void offset_bf_insert(uint8_t cpu, int id, int pos, int offset) {
  uint8_t buffer[ID_PAIR_SIZE];

  struct offset_info oi;
  oi.pos    = pos;
  oi.offset = offset;

  memcpy(buffer, &oi, ID_PAIR_SIZE);

  // don't care duplicate filter data.
  bloom_add(&offset_bf[cpu][id], buffer, ID_PAIR_SIZE);
}

bool offset_bf_hit(uint8_t cpu, int id, int pos, int offset) {
  uint8_t            buffer[ID_PAIR_SIZE];
  struct offset_info oi;
  oi.pos    = pos;
  oi.offset = offset;

  memcpy(buffer, &oi, ID_PAIR_SIZE);

  return bloom_check(&offset_bf[cpu][id], buffer, ID_PAIR_SIZE);
}

void update_id_table(uint8_t cpu, int paht_entry, int offset) {
  bool exist      = false;
  int  repl_entry = 0;
  int  id         = offset - PAHT[cpu][paht_entry].init;

  // Find page-ID
  for (int entry = 0; entry < NIDTES; ++entry) {
    if (IDT[cpu][entry].id == id) {      // if exists
      PAHT[cpu][paht_entry].id = entry;  // set an index to PID of a PAHT entry
      increase_lru_of_id_table(cpu, entry);
      exist = true;
      break;
    }
    if (IDT[cpu][entry].lru == NIDTES - 1) {  // check a victim
      repl_entry = entry;
    }
  }

  if (!exist) {
    if (IDT[cpu][repl_entry].valid) {           // page ID already exists
      bloom_free(&offset_bf[cpu][repl_entry]);  // emtpy OB
    }

    // add a new entry.
    IDT[cpu][repl_entry].id    = id;
    IDT[cpu][repl_entry].valid = true;
    increase_lru_of_id_table(cpu, repl_entry);
  }
}

int find_page_id(uint8_t cpu, uint64_t cl_address) {
  int      offset     = TRUNCATE(cl_address, LOG2_BLOCK_SIZE);
  uint64_t page       = cl_address >> LOG2_BLOCK_SIZE;
  uint32_t tag        = TRUNCATE(page, TAGSIZE);
  bool     exist      = false;
  int      repl_entry = 0;
  int      id         = -1;

  // Find page-ID in PAHT.
  for (int entry = 0; entry < NPAHTES; ++entry) {
    if (PAHT[cpu][entry].tag == tag) {
      if (!PAHT[cpu][entry].valid) {            // second access in this page
        if (PAHT[cpu][entry].init != offset) {  // second access is different from first access
          update_id_table(cpu, entry, offset);  // make page ID.
          PAHT[cpu][entry].valid = true;
        }
      }
      id = PAHT[cpu][entry].id;
      increase_lru_of_page_access_history_table(cpu, entry);
      exist = true;
      break;
    }
    if (PAHT[cpu][entry].lru == NPAHTES - 1) {
      repl_entry = entry;  // check a victim
    }
  }

  if (!exist) {
    // Add a new entry
    PAHT[cpu][repl_entry].tag   = tag;
    PAHT[cpu][repl_entry].id    = -1;
    PAHT[cpu][repl_entry].init  = offset;
    PAHT[cpu][repl_entry].valid = false;
    increase_lru_of_page_access_history_table(cpu, repl_entry);
  }

  return id;
}

void os_learn_best_offset(uint8_t cpu, uint64_t lineaddr, int id) {
  // X: block address of prefetch trigger event
  // O: test offset
  // For prefetch timeliness, check X - O, which is a block address of a previous access.

  int testoffset = OFFSET[os[cpu].p];  // round-robin manner

  uint64_t testlineaddr = lineaddr - testoffset;

  if (SAMEPAGE(lineaddr, testlineaddr) && addr_bf_hit(cpu, testlineaddr)) {  // if X - O hits in ABF

    ++os[cpu].score[os[cpu].p];  // increase a score of O by 1

    if (os[cpu].score[os[cpu].p] > SCORE_MAX) {
      os[cpu].score[os[cpu].p] = SCORE_MAX;
    }

    if (id >= 0) {  // page ID exists
      // insert filter data (pos, offset) into OBF[id]
      offset_bf_insert(cpu, id, TRUNCATE(testlineaddr, LOG2_BLOCK_SIZE), testoffset);
    }

    if (os[cpu].score[os[cpu].p] >= os[cpu].max_score) {
      os[cpu].max_score = os[cpu].score[os[cpu].p];
    }

    if (os[cpu].score[os[cpu].p] == SCORE_MAX && os[cpu].exist[os[cpu].p] == false) {
      os[cpu].candidate_offsets[os[cpu].current_degree] = testoffset;  // O is a candidate
      os[cpu].exist[os[cpu].p]                          = true;
      ++os[cpu].current_degree;
    }
  }

  if (os[cpu].current_degree == DEGREE) {  // if the number of candidates is DEGREE, use all candidate offsets next
    for (int degree = 0; degree < os[cpu].current_degree; ++degree) {
      most_offsets[cpu][degree] = os[cpu].candidate_offsets[degree];
    }
    for (int degree = os[cpu].current_degree; degree < DEGREE; ++degree) {
      most_offsets[cpu][degree] = 0;
    }
    os_reset(cpu);  // learning is over. initializaion
    return;
  }

  if (os[cpu].p == (NOFFSETS - 1)) {  // round-robin is over
    os[cpu].round++;

    if (os[cpu].round == ROUND_MAX) {  // If don't fill the candidate offsets by DEGREE during ROUND_MAX, use candidate offsets found
      for (int degree = 0; degree < os[cpu].current_degree; ++degree) {
        most_offsets[cpu][degree] = os[cpu].candidate_offsets[degree];
      }

      for (int degree = os[cpu].current_degree; degree < DEGREE; ++degree) {
        most_offsets[cpu][degree] = 0;
      }

      if (os[cpu].current_degree == 0) {
        most_offsets[cpu][0] = (os[cpu].max_score > BAD_SCORE) ? DEFAULT_OFFSET : 0;
      }

      os_reset(cpu);  // learning is over. initializaion
      return;
    }
  }

  INCREMENT(os[cpu].p, NOFFSETS);  // prepare to test the next offset
}

bool issue_prefetch(uint8_t cpu, uint64_t lineaddr, int pos, int id) {
  // there are no most offsets
  if (most_offsets[cpu][pos] == 0) {
    return false;
  }

  // page crossing
  if (!SAMEPAGE(lineaddr, lineaddr + most_offsets[cpu][pos])) {
    return false;
  }

  int src = TRUNCATE(lineaddr, LOG2_BLOCK_SIZE);

  // find filter data in OBF. hit -> pass, miss -> filter
  if (id >= 0 && !offset_bf_hit(cpu, id, src, most_offsets[cpu][pos])) {
    return false;
  }

  return true;
}

void CACHE::l2c_prefetcher_initialize() {
  cout << "ADDR_BFSIZE: " << ADDR_BFSIZE << endl;
  cout << "OFFSET_BFSIZE: " << OFFSET_BFSIZE << endl;
  cout << "NUMHASH: " << NUMHASH << endl;
  cout << "ID_PAIR_SIZE: " << ID_PAIR_SIZE << endl;
  cout << "ADDR_BF_REFRESH: " << ADDR_BF_REFRESH << endl;
  cout << "ADDR_SIZE: " << ADDR_SIZE << endl;
  cout << "NOFFSETS: " << NOFFSETS << endl;
  cout << "DEFAULT_OFFSET: " << DEFAULT_OFFSET << endl;
  cout << "SCORE_MAX: " << SCORE_MAX << endl;
  cout << "ROUND_MAX: " << ROUND_MAX << endl;
  cout << "BAD_SCORE: " << BAD_SCORE << endl;
  cout << "NPAHTES: " << NPAHTES << endl;
  cout << "NIDTES: " << NIDTES << endl;
  cout << "TAGSIZE: " << TAGSIZE << endl;

  cout << "DEGREE: " << DEGREE << endl;

  most_offsets[cpu][0] = DEFAULT_OFFSET;

  for (int i = 1; i < DEGREE; ++i) {
    most_offsets[cpu][i] = 0;
  }

  bloom_init(&addr_bf[cpu], ADDR_BFSIZE, NUMHASH);

  for (int entry = 0; entry < NIDTES; ++entry) {
    bloom_init(&offset_bf[cpu][entry], OFFSET_BFSIZE, NUMHASH);
  }

  os_reset(cpu);

  for (int entry = 0; entry < NPAHTES; ++entry) {
    PAHT[cpu][entry].lru = entry;
  }

  for (int entry = 0; entry < NIDTES; ++entry) {
    IDT[cpu][entry].lru = entry;
  }
}

void CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type) {
  uint64_t cl_address   = addr >> LOG2_BLOCK_SIZE;
  bool     miss         = (cache_hit == 0) ? true : false;
  bool     prefetch_hit = (cache_hit == 1 && type == 1) ? true : false;

  if (miss || prefetch_hit) {
    int id = find_page_id(cpu, cl_address);

    os_learn_best_offset(cpu, cl_address, id);

    for (int pos = 0; pos < DEGREE; ++pos) {
      if (issue_prefetch(cpu, cl_address, pos, id)) {
        uint64_t pf_addr = (cl_address + most_offsets[cpu][pos]) << LOG2_BLOCK_SIZE;

        if (id != -1) {
          prefetch_line(ip, addr, pf_addr, FILL_L2);

        } else {
          prefetch_line(ip, addr, pf_addr, FILL_LLC);
        }
      }
    }

    addr_bf_insert(cpu, cl_address);  // insert a block address into ABF
  }
}

void CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr) {}

void CACHE::l2c_prefetcher_final_stats() { cout << endl << "L2C PMOP Prefetcher final stats" << endl; }
