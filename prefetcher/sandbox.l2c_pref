#include <list>
#include "cache.h"

#define MATPLOT

#ifdef MATPLOT
#define MIN_CYCLE 0
#endif

#define BFSIZE 256
#define THRESH_1DEGREE 256
#define THRESH_2DEGREE 512
#define THRESH_3DEGREE 768
#define ROUND_MAX 256
#define BFINDEX 8
#define BFTAG 8

#define SAMEPAGE(lineaddr1, lineaddr2) ((((lineaddr1) ^ (lineaddr2)) >> LOG2_BLOCK_SIZE) == 0)
#define TRUNCATE(x, nbits) (((x) & ((1 << (nbits)) - 1)))

uint8_t bloom_filter[NUM_CPUS][BFSIZE];

struct poce {
  int8_t po;       // 6 bits
  uint16_t score;  // 10 bits

  poce() : po(0), score(0) {}
};

typedef std::list<poce> poc_list;
typedef poc_list::iterator poc_iter;

poc_list pocl[NUM_CPUS];
poc_iter curr_po[NUM_CPUS];
uint16_t period[NUM_CPUS];

struct pole {
  int8_t po;       //  6 bits
  uint8_t degree;  //  2 bits

  pole() : po(0), degree(0) {}
};

typedef std::list<pole> pol_list;
typedef pol_list::iterator pol_iter;

pol_list pol[NUM_CPUS];

typedef std::list<int8_t> bkc_list;
typedef bkc_list::iterator bkc_iter;

bkc_list bkcl[NUM_CPUS];

bool compare_score(const poce &first, const poce &second) { return (first.score < second.score); }

void print_status_pocl(uint8_t cpu) {
  printf("print_status_pocl\n");
  for (poc_iter iter = pocl[cpu].begin(); iter != pocl[cpu].end(); ++iter) {
    poce *poc = &(*iter);
    printf("po: %d, score %d\n", poc->po, poc->score);
  }
  printf("\n");
}

void print_status_bkcl(uint8_t cpu) {
  printf("print_status_bkcl\n");
  for (bkc_iter iter = bkcl[cpu].begin(); iter != bkcl[cpu].end(); ++iter) {
    printf("po: %d\n", *iter);
  }
  printf("\n");
}

void print_status_pol(uint8_t cpu) {
  for (pol_iter iter = pol[cpu].begin(); iter != pol[cpu].end(); ++iter) {
    pole *prefetch_offset_list_entry = &(*iter);
    printf("po: %d, degree %d\n", prefetch_offset_list_entry->po,
           prefetch_offset_list_entry->degree);
  }
  printf("\n");
}

uint8_t bf_tag(uint64_t lineaddr) { return TRUNCATE(lineaddr >> BFINDEX, BFTAG); }

uint8_t bf_index(uint64_t lineaddr) { return TRUNCATE(lineaddr ^ (lineaddr >> BFINDEX), BFINDEX); }

void bf_insert(uint8_t cpu, uint64_t lineaddr) {
  uint8_t i = bf_index(lineaddr);
  uint8_t tag = bf_tag(lineaddr);
  bloom_filter[cpu][i] = tag;
}

bool bf_hit(uint8_t cpu, uint64_t lineaddr) {
  uint8_t i = bf_index(lineaddr);
  uint8_t tag = bf_tag(lineaddr);
  return bloom_filter[cpu][i] == tag;
}

void pocl_reset_score(uint8_t cpu) {
  for (poc_iter iter = pocl[cpu].begin(); iter != pocl[cpu].end(); ++iter) {
    poce *poc = &(*iter);
    poc->score = 0;
  }
}

void learn_best_offset(uint8_t cpu, uint64_t cl_address) {
  // 해당 L2 access에 평가할 PO이다.
  poce *poc = &(*curr_po[cpu]);
  int8_t po = poc->po;

  // BF부터 확인한다.
  if (bf_hit(cpu, cl_address)) {
    // hit이므로 해당 PO의 점수를 상승시킨다.
    ++poc->score;

    // stream depth 4까지 존재를 확인할 수 있다. hit 마다 점수는 증가한다.
    // 중간에 비어도 카운트를 하는 전략 사용.
    // Demand access를 추적하는 것도 아니고 bloom_filter에서 스트림을 찾다니...

    for (int i = 1; i < 4; ++i) {
      if (!SAMEPAGE(cl_address, cl_address - (po * i))) break;
      if (bf_hit(cpu, cl_address - (po * i))) ++poc->score;
    }
  }

  // 스코어링을 마친 후 bloom_filter에 가상 프리페치 주소를 insert 수행
  if (SAMEPAGE(cl_address, cl_address + po)) {
    bf_insert(cpu, cl_address + po);
  }

  ++curr_po[cpu];  //  round robin

  if (curr_po[cpu] == pocl[cpu].end()) {  // 모든 PO를 평가함
    ++period[cpu];                        // round 증가
    curr_po[cpu] = pocl[cpu].begin();     // 리스트의 첫 PO부터 다시 시작
  }

  if (period[cpu] == ROUND_MAX) {  // 256 round
    // 여기서 프리페치 오프셋을 결정한다. (추가로 degree 까지)

    pol[cpu].clear();

    for (poc_iter iter = pocl[cpu].begin(); iter != pocl[cpu].end(); ++iter) {
      poce *poc = &(*iter);
      if (poc->score > THRESH_3DEGREE) {
        pole prefetch_offset_list_entry;
        prefetch_offset_list_entry.po = poc->po;
        prefetch_offset_list_entry.degree = 3;
        pol[cpu].push_back(prefetch_offset_list_entry);
      } else if (poc->score > THRESH_2DEGREE) {
        pole prefetch_offset_list_entry;
        prefetch_offset_list_entry.po = poc->po;
        prefetch_offset_list_entry.degree = 2;
        pol[cpu].push_back(prefetch_offset_list_entry);
      } else if (poc->score > THRESH_1DEGREE) {
        pole prefetch_offset_list_entry;
        prefetch_offset_list_entry.po = poc->po;
        prefetch_offset_list_entry.degree = 1;
        pol[cpu].push_back(prefetch_offset_list_entry);
      }
    }

    // pocl을 스코어로 정렬해서 낮은 점수의 po를 제거(하면서 bkcl로 옮겨야함)
    pocl[cpu].sort(compare_score);

    poc_iter rmiter = pocl[cpu].begin();
    bkc_iter additer = bkcl[cpu].begin();

    for (int i = 0; i < 4; ++i) {
      poce *prefetch_offset_candidate_entry = &(*rmiter);
      bkcl[cpu].push_back(prefetch_offset_candidate_entry->po);
      ++rmiter;
      pocl[cpu].pop_front();
      poce new_poce;
      new_poce.po = *additer;
      pocl[cpu].push_back(new_poce);
      ++additer;
      bkcl[cpu].pop_front();
    }
    // print_status_pocl(cpu);

    pocl_reset_score(cpu);

    // exit(0);

    period[cpu] = 0;
    curr_po[cpu] = pocl[cpu].begin();  // 리스트의 첫 PO부터 다시 시작
  }
}

bool issue_prefetch(uint8_t cpu, uint64_t lineaddr, int8_t po) {
  if (!SAMEPAGE(lineaddr, lineaddr + po)) {
    return false;
  }

  return true;
}

void CACHE::l2c_prefetcher_initialize() {
  for (int po = 1; po <= 8; ++po) {
    poce poc;
    poc.po = po;
    pocl[cpu].push_back(poc);

    poc.po = -po;
    pocl[cpu].push_back(poc);
  }

  for (int po = 9; po <= 16; ++po) {
    bkcl[cpu].push_back(po);
    bkcl[cpu].push_back(-po);
  }

  curr_po[cpu] = pocl[cpu].begin();
  period[cpu] = 0;
}

void CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type) {
  // Bloom Filter를 설계해야 하는데
  // 256개가 false positive 1%라고 하고 있다. 무슨 hash를 썼는지는 모르겠지만.
  // 난 그냥 BO의 Hash를 그대로 쓴다. 니네가 Hash 뭐 썼는지 공개를 하지 않았기 때문이다.

  // 후보 프리페치 오프셋은 16개이다. 초기값은 -8~8로 설정한다.
  // 최저점을 4개 걷어내고 새로 4개를 넣으라고 하고 있다. sandbox에서 제일 애매한 건 이 부분...
  // 일단 최근 평가하지 않은 프리페치 오프셋 삽입은 FIFO 큐로 해결할건데.
  // "최저점" 4개를 찾아야하네. 그럼 sorting 해야 하잖아. 아 미친. list::sort 쓰면 편하게 할 수 있을
  // 것 같긴 하다.
  // 여기에 바로 적용하지 말고 샘플 만들어서 테스트 후 집어넣는다.

  // 평가는 16개를 하나씩 수행하여 256번을 돈다. 전체로는 1024번의 평가가 이뤄진다.
  // 4.5 detecting stream에 의해 하나의 프리페치 오프셋은 round당 최대 4 points를 얻을 수 있게
  // 설계되어 있다.
  // 4 points를 얻는 예제. 예를 들어 지금 bloom filter에서 hit이 난 주소에 대하여 평가 프리페치
  // 오프셋을 1 step씩 빼어 주소들이 추가로 존재하는 지를 확인한다. 논문에서는 프리페치 오프셋 3에
  // 대하여 0, -3, -6, -9를 확인하는 것을 예시로 들고 있다. (지금보니 BO보다 간단한 프리페처가 없네)

  // 프리페치 오프셋에 negative가 있음을 주의한다.

  uint64_t cl_address = addr >> LOG2_BLOCK_SIZE;

  bool miss = (cache_hit == 0) ? true : false;
  bool prefetch_hit = (cache_hit == 1 && type == 1) ? true : false;

#ifdef MATPLOT
  uint64_t cycle = current_core_cycle[cpu];
  if (cycle > MIN_CYCLE) {
    if (!cache_hit) {
      cout << "CPU" << cpu << "," << cycle << ",0," << cl_address << ",0,0" << endl;
    } else {
      if (type == 1) {
        cout << "CPU" << cpu << "," << cycle << ",0,0," << cl_address << ",0" << endl;
      } else {
        cout << "CPU" << cpu << "," << cycle << "," << cl_address << ",0,0,0" << endl;
      }
    }
  }
#endif

  if (miss || prefetch_hit) {
    learn_best_offset(cpu, cl_address);

    for (pol_iter iter = pol[cpu].begin(); iter != pol[cpu].end(); ++iter) {
      pole *prefetch_offset_list_entry = &(*iter);
      for (int degree = 1; degree <= prefetch_offset_list_entry->degree; ++degree) {
        int8_t po = prefetch_offset_list_entry->po * degree;
        if (issue_prefetch(cpu, cl_address, po)) {
          uint64_t pf_addr = (cl_address + po) << LOG2_BLOCK_SIZE;

          if (prefetch_line(ip, addr, pf_addr, FILL_L2)) {
            // no action
          }
        }
      }
    }
  }
}

void CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch,
                                      uint64_t evicted_addr) {
#ifdef MATPLOT
  if (prefetch) {
    uint64_t cl_address = addr >> LOG2_BLOCK_SIZE;
    uint64_t cycle = current_core_cycle[cpu];
    if (cycle > MIN_CYCLE) {
      cout << "CPU" << cpu << "," << cycle << ",0,0,0," << cl_address << endl;
    }
  }
#endif
}

void CACHE::l2c_prefetcher_final_stats() {}
